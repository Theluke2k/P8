function [X_opt,U_opt,P_trace,opti] = MPC_func(rob_init, kf_init, en_params, mpc_params, cost_params, n_robots, map_bounds, min_dist, sim_params, verbose_opt)
%% Parameters
import casadi.*

% Map boundaries
xmin = map_bounds(1); xmax = map_bounds(2);
ymin = map_bounds(3); ymax = map_bounds(4);
dmin = min_dist;
vmax = 20;

% MPC parameters
Hp = mpc_params(1); % Prediction horizon
Hu = mpc_params(2); % Control horizon

% MPC cost function parameters
lambda1 = cost_params(1); % Weight for smooth control
lambda2 = cost_params(2); % Weight for uncertainty
eps = cost_params(3); % Regularization parameter

% Simulation parameters
Ts = sim_params(1); % MPC sampling time
dt = sim_params(2); % Simulation sampling time

% MISC
M = n_robots; % Number of robots

%% KALMAN FILTER
% Define parameters to be used
A_p = kf_init{3};     % Process system matrix with MPC dt
B_p = kf_init{4};     % Process input matrix with MPC dt
u_p = kf_init{5};          % Process input
Q_p = kf_init{6};          % Process noise covariance matrix
R_p = kf_init{7};          % Measurement noise covariance matrix
error_cv_selec = kf_init{8};% Selection of diagonal elements to have in cost function
z_est_0 = kf_init{1};    % KF state from k-1
P_0 = kf_init{2};      % KF error covariance matrix fom k-1

% Useful numbers
Nx_p = size(A_p,1);       % Number of states in process model
Nu_p = size(B_p,2);       % Number of inputs in process model

%% Robot model and Tuning
% Tuning for a single robot
Q = eye(Nx_p);
Q(1,1) = (20/500)^2;
Q(2,2) = 0;
Q(4,4) = 0;
Q(6,6) = 0;
Q(8,8) = 0;
R_single = [0 0;
     0 0];

% Import robot dynamics from parameters
A_r = rob_init{2};    % Robot system matrix
B_r = rob_init{3};    % Robot input matrix

% Save useful numbers
Nx_r = size(A_r,1)/M;   % Number of states for a sigle robot
Nu_r = size(B_r,2)/M;   % Number of inputs for a single robot

% Reformulate to delta u
A_rd = [A_r,B_r; zeros(M*Nu_r, M*Nx_r), eye(M*Nu_r, M*Nu_r)];
B_rd = [B_r; eye(M*Nu_r)];

% Construct full tuning matrices
%Q = kron(eye(Nx_p), Q_single);
R = kron(eye(M), R_single);

% Robot initial conditions
pos0 = rob_init{1};
u0 = rob_init{4};
x0 = [pos0; u0];    % Initial condition for delta u formulation

%% ENERGY
% Extract energy package info
e0 = en_params{1};
power = en_params{2};
charge_rate = en_params{3};
charger_x = en_params{4};
charger_y = en_params{5};
charger_r = en_params{6};

%% MPC object
% Setup opti
opti = Opti();

% Decision variables (to be optimized over)
du = opti.variable(M*Nu_r, Hu);   % Delta u (change in robot control input)  
x_rd = opti.variable(M*Nx_r + M*Nu_r,Hp+1);            % Robot positions defined as optimization variables but are bounded by constraints  
charging = opti.variable(M,Hp+1);       % Binary variable to track whether the robot is charging
e = opti.variable(M,Hp+1);              % Energy of robot
e_full = opti.variable(M,Hp+1);
%x_rd = MX.zeros(M*Nx_r + M*Nu_r,Hp+1);

% States and varialbes (NOT to be optimized over)
z_est = MX.zeros(Nx_p,Hp+1);          % Kalman filter states
P = MX.zeros(Nx_p,(Hp+1)*Nx_p);       % Kalman filter error covariance matrix
p = MX.zeros(Nx_p,Hp+1);              % KF error covariance diagonal elements
%z_hat = opti.zeros(Nx_p,Hp+1);
%P_hat = opti.zeros(Nx_p,(Hp+1)*Nx_p);
%H = opti.parameter(M,(Hp+1)*Nx_p);
%h_vec = opti.parameter(M,Hp+1);
%K = opti.parameter(Nx_p,(Hp+1)*M);

% Enforce initial conditions
opti.subject_to(x_rd(:,1) == x0);
opti.subject_to(e(:,1) == e0);  % Initial energy of robots
z_est(:,1) = z_est_0;
P(:,1:Nx_p) = P_0;

%x_rd(:,1) = x0;


%% Create Cost Function
% Control input
cost = 0;
for i = 1:Hu
    cost = cost + du(:,i)'*R*du(:,i);
end

% Kalman filter iterations
z_hat_dum = MX.zeros(Nx_p,Hp+1);
K_dum = MX.zeros(Nx_p,(Hp+1)*M);
H_dum = MX.zeros(M,(Hp+1)*Nx_p);
P_hat_dum = MX.zeros(Nx_p,(Hp+1)*Nx_p);

for i = 2:Hp+1
    % % Robot dynamics
    % if i <= Hu+1
    %     x_rd(:,i) = A_rd*x_rd(:,i-1) + B_rd*du(:,i);
    % else
    %     x_rd(:,i) = A_rd*x_rd(:,i-1);
    % end

    % Define temp. variables
    H = MX.zeros(M,Nx_p);
    h_vec = MX.zeros(M,1);
    K = MX.zeros(Nx_p,M);
    z_hat = MX.zeros(Nx_p,1);
    P_hat = MX.zeros(Nx_p,Nx_p);
    
    % PREDICTION STEP
    z_hat = A_p*z_est(:,i-1) + B_p*u_p(:,i-1);
    P_hat = A_p*P(:,(i-2)*Nx_p+1:(i-1)*Nx_p)*A_p' + Q_p;
    z_est(:,i) = z_hat;

    % PREPROCESSING
    for m = 1:M
        % Get expected robot measurements with predicted states
        h_vec(m) = get_h(z_hat,x_rd(2*m-1,i),x_rd(2*m,i));

        % Compute Jacobian
        H(m,1) = h_vec(m) / z_hat(1);
        H(m,3) = h_vec(m) * (1/z_hat(3) - ((x_rd(2*m-1,i) - z_hat(5))^2 + (x_rd(2*m,i) - z_hat(7))^2));
        H(m,5) = h_vec(m) * (-2*z_hat(3)*(z_hat(5) - x_rd(2*m-1,i)));
        H(m,7) = h_vec(m) * (-2*z_hat(3)*(z_hat(7) - x_rd(2*m,i)));
    end
    
    % UPDATE STEP
    K = (P_hat*H') / (H*P_hat*H' + R_p);
    P(:,(i-1)*Nx_p+1:i*Nx_p) = P_hat - K*H*P_hat;
    
    % Define p as the diagonal elements of P
    p(:,i) = diag(P(:,(i-1)*Nx_p+1:i*Nx_p));

    % Collection :)
    z_hat_dum(:,i) = z_hat;
    P_hat_dum(:,(i-1)*Nx_p+1:i*Nx_p) = P_hat;
    K_dum(:,(i-1)*M+1:i*M) = K;
    H_dum(:, (i-1)*Nx_p+1:i*Nx_p) = H;

end

% Now that p has been defined in terms of the robot positions, we can write
% up the cost
cost_KF = 0;
for i = 1:Hp
    cost_KF = cost_KF + p(:,i)'*Q*p(:,i);
end

% % Single shot energy constraints
% charging = MX.zeros(M,Hp+1);       % Binary variable to track whether the robot is charging
% e = MX.zeros(M,Hp+1);              % Energy of robot
% e_full = MX.zeros(M,Hp+1);
% for i = 2:Hp+1
%     x_pos = x_rd(2*m-1,i-1);
%     y_pos = x_rd(2*m,i-1);
% end

% Constraints
for i = 2:Hp+1
    % Robot dynamics
    if i <= Hu
        opti.subject_to(x_rd(:,i) == A_rd*x_rd(:,i-1) + B_rd*du(:,i-1));
    else
        opti.subject_to(x_rd(:,i) == A_rd*x_rd(:,i-1)); % DU(k > Hu) = 0
    end

    % Robot constraints
    for m = 1:M
        % Velocity and box constraints
        x_vel = x_rd(2*M+2*m-1,i);
        y_vel = x_rd(2*M+2*m,i);
        opti.subject_to(x_vel^2 + y_vel^2 <= vmax^2);

        % Box constraints
        opti.subject_to(xmin <= x_rd(2*m-1,:));
        opti.subject_to(xmax >= x_rd(2*m-1,:));
        opti.subject_to(ymin <= x_rd(2*m,:));
        opti.subject_to(ymax >= x_rd(2*m,:));
       
        % % Collision constraints
        % for j = m+1:M
        %     x_m = x_rd(2*m-1, i);
        %     y_m = x_rd(2*m, i);
        %     x_j = x_rd(2*j-1, i);
        %     y_j = x_rd(2*j,i);
        %     dist_squared = (x_m - x_j)^2 + (y_m - y_j)^2;
        %     opti.subject_to(dist_squared >= dmin^2);
        % end

        % Energy dynamics
        x_pos = x_rd(2*m-1,i);
        y_pos = x_rd(2*m,i);
        charging(m,i) = if_else((x_pos - charger_x)^2 + (y_pos - charger_y)^2 <= charger_r^2, 1, 0);
        e_full(m,i-1) = if_else(e(m,i-1) >= 1-charge_rate*Ts, 1, 0);
        %opti.subject_to(e(m,i) == e(m,i-1) - (1-charging(m,i-1))*power(sqrt(x_vel^2 + y_vel^2))*Ts + charging(m,i-1)*(1-e_full(m,i-1))*charge_rate*Ts);
        opti.subject_to(e(m,i) == e(m,i-1) - (1-charging(m,i))*power*Ts + charging(m,i)*(1-e_full(m,i-1))*charge_rate*Ts);
        opti.subject_to(0 <= e(m,i));   % Energy must not go under 0
        opti.subject_to(e(m,i) <= 1);   % Energy must not exceed 1

        % Energy constaints (barrier)
        x_pos = x_rd(2*m-1,i);
        y_pos = x_rd(2*m,i);
        barrier_dist = vmax*(e(m,i)/power); % Distance that robot m can get by going full speed in one direction
        opti.subject_to((x_pos - charger_x)^2 + (y_pos - charger_y)^2 < barrier_dist^2);
    end
    % % Energy constraints
    % cost_slack = 0;
    % for m =1:M
    %     barrier_dist = vmax*e(m,i+1)/power(vmax);
    %     %opti.subject_to((Za(4*(m-1) + 1,i+1) - charger_x)^2 + (Za(4*(m-1) + 2,i+1) - charger_y)^2 < barrier_dist^2 + e_slack(m,i));
    %     %opti.subject_to(e_slack(m,i)>=0);
    %     opti.subject_to(0 <= e(m,i+1));
    %     opti.subject_to(e(m,i+1) <= 1);
    %     %cost_slack = cost_slack + e_slack(m,i);
    % end
end

% Define MPC 'object'
opti.minimize(cost + cost_KF);
solver_opts = struct();
solver_opts.ipopt.max_iter = 2000;
solver_opts.ipopt.tol = 1e-3;
solver_opts.ipopt.print_level = verbose_opt;
solver_opts.print_time = false;
opti.solver('ipopt', solver_opts);

%% Call MPC
%sol = opti.solve();

% Solve
try
    sol = opti.solve();
    sol.value(x_rd);
    sol.value(e)
catch
    disp("MPC FAILED!!! :((((")
    debug = opti.debug
end

% Outputs
X_opt = sol.value(x_rd(1:2*M,:));
U_opt = sol.value(x_rd(2*M+1:end,:));
P_trace = 0;


end

%opti.set_value(H(:,1:Nx_p), zeros(M,Nx_p));
%opti.set_value(h_vec(:,1), zeros(M,1));
%opti.set_value(K(:,1:M), zeros(Nx_p,M));

% % Decision variables (to be optimized over)
% DU = opti.variable(M*l_a,Hu);
% Za = opti.variable(M*n_a,Hp+1);
% 
% P_KF_est = opti.variable(8*Hp,8);
% P_KF_pred = opti.variable(8*(Hp+1),8);
% 
% Z_KF = opti.variable(8,Hp+1);
% h_KF = opti.variable(M,Hp);
% 
% H_KF = opti.variable(M,8);
% K_KF = opti.variable(8,M);
% 
% % Parameters (NOT to be optimized over)
% Z0 = opti.parameter(M*n,1);
% Uprev = opti.parameter(M*l,1);
% Z0_KF = opti.parameter(8,1);
% P0_KF = opti.parameter(8,8);

% % Constraints
% Za0 = [reshape(Z0,n,M); reshape(Uprev,l,M)];
% opti.subject_to(Za(:,1) == reshape(Za0,M*(n+l),1));
% for k = 1:Hp
%     % Dynamics
%     if k <= Hu
%         opti.subject_to(Za(:,k+1) == A_aN*Za(:,k) + B_aN*DU(:,k));
%     else
%         opti.subject_to(Za(:,k+1) == A_aN*Za(:,k)); % DU(k > Hu) = 0
%     end
% 
%     % Box constraints
%     opti.subject_to(xmin <= Za(1:n_a:M*n_a,k+1) <= xmax);
%     opti.subject_to(ymin <= Za(2:n_a:M*n_a,k+1) <= ymax);
% 
%     % Velocity constraints
%     for j = 1:M
%         x_vel = Za(3+(j-1)*n_a,k+1);
%         y_vel = Za(4+(j-1)*n_a,k+1);
%         opti.subject_to(x_vel^2 + y_vel^2 <= vmax^2);
%     end
% 
%     % % Collision avoidance
%     % for i = 1:M
%     %     for j = i+1:M
%     %         xi = Za((i-1)*n_a + 1, k+1);
%     %         yi = Za((i-1)*n_a + 2, k+1);
%     %         xj = Za((j-1)*n_a + 1, k+1);
%     %         yj = Za((j-1)*n_a + 2, k+1);
%     % 
%     %         dist_squared = (xi - xj)^2 + (yi - yj)^2;
%     %         opti.subject_to(dist_squared >= dmin^2);
%     %     end
%     % end
% end

% % Outputs
% Z_opt = [];
% U_opt = [];
% for i = 1:n_a:M*n_a
%     Z_opt = [Z_opt; Za(i,:); Za(i+1,:)];
%     U_opt = [U_opt; Za(i+2,:); Za(i+3,:)];
% end

%solver_opts = struct();
%solver_opts.ipopt.max_iter = 2000;
%solver_opts.ipopt.tol = 1e-6;
%solver_opts.ipopt.print_level = verbose_opt;
% solver_opts.print_time = false;

% Initialization
% Z0_val = rob_init(:,1); % Initial robot states
% Uprev_val = rob_init(:,2); % Previous control input
% Z0_KF_val = kf_init(:,1); % Initial prediction for kalman filter
% P0_KF_val = kf_init(:,2:end); % Initial error covariance
% Z0_KF_val = z_est(:,1);
% P0_KF_val = P(:,:,1);

% opti.set_value(Z0, Z0_val);
% opti.set_value(Uprev, Uprev_val);
% opti.set_value(Z0_KF, Z0_KF_val);
% opti.set_value(P0_KF, P0_KF_val);

% 
% % Outputs
% Z_sol = sol.value(Z_opt);
% U_sol = sol.value(U_opt);
% 
% P_sol = sol.value(P_KF_pred);
% P_trace = [];
% for k = 1:Hp+1
%     P_trace = [P_trace, log(abs(trace(P_sol(8*k-7:8*k,:))))];
% end